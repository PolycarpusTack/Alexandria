#!/usr/bin/env node

/**
 * Database setup script for Alexandria Platform
 * 
 * This script helps set up the PostgreSQL database for development
 */

const { spawn } = require('child_process');
const readline = require('readline');
const fs = require('fs');
const path = require('path');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function runCommand(command, args = []) {
  return new Promise((resolve, reject) => {
    const proc = spawn(command, args, { stdio: 'inherit', shell: true });
    proc.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Command failed with code ${code}`));
      } else {
        resolve();
      }
    });
  });
}

async function checkPostgresInstalled() {
  try {
    await runCommand('psql', ['--version']);
    return true;
  } catch {
    return false;
  }
}

async function createDatabase(config) {
  console.log('\nüì¶ Creating database...');
  
  try {
    // Create user if it doesn't exist
    await runCommand('psql', [
      '-U', 'postgres',
      '-c', `CREATE USER ${config.user} WITH PASSWORD '${config.password}';`
    ]).catch(() => {
      console.log('User might already exist, continuing...');
    });

    // Grant create database privilege
    await runCommand('psql', [
      '-U', 'postgres',
      '-c', `ALTER USER ${config.user} CREATEDB;`
    ]);

    // Create database
    await runCommand('psql', [
      '-U', 'postgres',
      '-c', `CREATE DATABASE ${config.database} OWNER ${config.user};`
    ]).catch(() => {
      console.log('Database might already exist, continuing...');
    });

    // Grant all privileges
    await runCommand('psql', [
      '-U', 'postgres',
      '-c', `GRANT ALL PRIVILEGES ON DATABASE ${config.database} TO ${config.user};`
    ]);

    console.log('‚úÖ Database created successfully!');
  } catch (error) {
    console.error('‚ùå Error creating database:', error.message);
    console.log('\nYou may need to run these commands manually:');
    console.log(`CREATE USER ${config.user} WITH PASSWORD '${config.password}';`);
    console.log(`ALTER USER ${config.user} CREATEDB;`);
    console.log(`CREATE DATABASE ${config.database} OWNER ${config.user};`);
    console.log(`GRANT ALL PRIVILEGES ON DATABASE ${config.database} TO ${config.user};`);
  }
}

async function createEnvFile(config) {
  const envPath = path.join(__dirname, '..', '.env');
  
  if (fs.existsSync(envPath)) {
    const overwrite = await question('\n.env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Keeping existing .env file.');
      return;
    }
  }

  const envContent = `# Alexandria Platform Environment Configuration
# Generated by setup-database.js

# Node Environment
NODE_ENV=development

# Server Configuration
PORT=4000
HOST=localhost

# Database Configuration
USE_POSTGRES=true
DB_HOST=${config.host}
DB_PORT=${config.port}
DB_NAME=${config.database}
DB_USER=${config.user}
DB_PASSWORD=${config.password}
DB_SSL=false
DB_POOL_MAX=10
DB_IDLE_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=2000
DB_RUN_MIGRATIONS=true

# Security Configuration
JWT_SECRET=${generateSecret(32)}
JWT_EXPIRATION=86400
ENCRYPTION_KEY=${generateSecret(32)}

# Ollama Configuration (for LLM)
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=llama2

# Feature Flags
ENABLE_CRASH_ANALYZER=true
ENABLE_LOG_VISUALIZATION=false
ENABLE_TICKET_ANALYSIS=false
ENABLE_KNOWLEDGE_BASE=false

# Logging
LOG_LEVEL=info
LOG_FILE=logs/alexandria.log

# File Upload Configuration
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=100

# Session Configuration
SESSION_SECRET=${generateSecret(32)}
SESSION_TIMEOUT=3600000

# Development Options
DEV_AUTO_LOGIN=false
DEV_SEED_DATA=false
`;

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ .env file created successfully!');
}

function generateSecret(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

async function main() {
  console.log('üöÄ Alexandria Platform - Database Setup\n');

  // Check if PostgreSQL is installed
  const hasPostgres = await checkPostgresInstalled();
  if (!hasPostgres) {
    console.log('‚ùå PostgreSQL is not installed or not in PATH.');
    console.log('Please install PostgreSQL first: https://www.postgresql.org/download/');
    process.exit(1);
  }

  console.log('‚úÖ PostgreSQL is installed.\n');

  // Get database configuration
  const config = {
    host: await question('Database host (localhost): ') || 'localhost',
    port: await question('Database port (5432): ') || '5432',
    database: await question('Database name (alexandria): ') || 'alexandria',
    user: await question('Database user (alexandria): ') || 'alexandria',
    password: await question('Database password: ')
  };

  if (!config.password) {
    console.log('‚ùå Password is required!');
    process.exit(1);
  }

  // Create database
  const createDb = await question('\nCreate database and user? (Y/n): ');
  if (createDb.toLowerCase() !== 'n') {
    await createDatabase(config);
  }

  // Create .env file
  const createEnv = await question('\nCreate .env file? (Y/n): ');
  if (createEnv.toLowerCase() !== 'n') {
    await createEnvFile(config);
  }

  console.log('\nüéâ Setup complete!');
  console.log('\nNext steps:');
  console.log('1. Run "ppppnpm install" to install dependencies');
  console.log('2. Run "ppppnpm run dev" to start the development server');
  console.log('3. The database migrations will run automatically on first start');

  rl.close();
}

main().catch(error => {
  console.error('Setup failed:', error);
  process.exit(1);
});