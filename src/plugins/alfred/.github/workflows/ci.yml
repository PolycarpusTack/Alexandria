name: Alfred Plugin CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/plugins/alfred/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/plugins/alfred/**'
  workflow_dispatch:

jobs:
  # Quality Assurance checks
  qa-checks:
    name: Quality Assurance
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: TypeScript compilation check
      working-directory: src/plugins/alfred
      run: npm run type-check
      
    - name: ESLint code quality check
      working-directory: src/plugins/alfred
      run: npm run lint
      
    - name: Security vulnerability scan
      working-directory: src/plugins/alfred
      run: npm run security:check
      
    - name: Upload QA artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: qa-reports-${{ matrix.node-version }}
        path: |
          src/plugins/alfred/qa-report.json
          src/plugins/alfred/eslint-report.json

  # Unit and Integration Tests
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: qa-checks
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: Run unit tests with coverage
      working-directory: src/plugins/alfred
      run: npm run test:coverage
      
    - name: Run accessibility tests
      working-directory: src/plugins/alfred
      run: npm run test:accessibility
      
    - name: Run QA tests
      working-directory: src/plugins/alfred
      run: npm run test:qa
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: src/plugins/alfred/coverage/lcov.info
        directory: src/plugins/alfred/coverage
        flags: alfred-plugin
        name: alfred-plugin-coverage
        fail_ci_if_error: false
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          src/plugins/alfred/coverage/
          src/plugins/alfred/test-results/

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test-suite
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: src/plugins/alfred
      run: npx playwright install --with-deps
      
    - name: Start Alexandria server
      run: |
        cd src/plugins/alfred
        npm run build &
        # Wait for server to be ready
        sleep 30
        
    - name: Run E2E tests
      working-directory: src/plugins/alfred
      run: npm run test:e2e
      
    - name: Upload E2E artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results
        path: |
          src/plugins/alfred/playwright-report/
          src/plugins/alfred/test-results/

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [qa-checks, test-suite]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: Build package
      working-directory: src/plugins/alfred
      run: npm run build
      
    - name: Package plugin
      working-directory: src/plugins/alfred
      run: npm pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: plugin-package
        path: |
          src/plugins/alfred/dist/
          src/plugins/alfred/*.tgz

  # Security Analysis
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: qa-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: Run CodeQL analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: typescript, javascript
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'alfred-plugin'
        path: 'src/plugins/alfred'
        format: 'ALL'
        
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          reports/
          src/plugins/alfred/security-report.json

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'src/plugins/alfred/package-lock.json'
        
    - name: Install dependencies
      working-directory: src/plugins/alfred
      run: npm ci
      
    - name: Build for performance testing
      working-directory: src/plugins/alfred
      run: npm run build
      
    - name: Bundle size analysis
      working-directory: src/plugins/alfred
      run: |
        echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        find dist/ -name "*.js" -exec sh -c 'echo "| {} | $(du -h {} | cut -f1) |"' \; >> $GITHUB_STEP_SUMMARY
        
    - name: Performance benchmarks
      working-directory: src/plugins/alfred
      run: |
        # Run performance tests here
        echo "Performance tests would run here"

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: plugin-package
        path: ./artifacts
        
    - name: Deploy to registry
      run: |
        echo "Deployment would happen here"
        # npm publish or other deployment steps
        
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Alfred Plugin ${{ github.ref_name }}
        body: |
          ## Changes in this release
          - Automated release from CI/CD pipeline
          
          ## Artifacts
          - Plugin package: `alfred-plugin-${{ github.ref_name }}.tgz`
        draft: false
        prerelease: false

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, performance]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: geekyeggo/delete-artifact@v4
      with:
        name: |
          qa-reports-*
          test-results-*
        failOnError: false